#ifndef FT_H
# define FT_H
int				ft_atoi_base(char *str, char *base);
int				ft_atoi(char *str);
void			ft_div_mod(int a, int b, int *div, int *mod);
void			ft_eight_queens_puzzle_2(void);
int				ft_eight_queens_puzzle(void);
int				ft_fibonacci(int index);
int				ft_find_next_prime(int nb);
void			ft_ft(int *nbr);
void			ft_is_negative(int n);
int				ft_is_prime(int nb);
int				ft_iterative_factorial(int nb);
int				ft_iterative_power(int nb, int power);
void			ft_print_alphabet(void);
void			ft_print_comb2(void);
void			ft_print_comb(void);
void			ft_print_combn(int n);
void			*ft_print_memory(void *addr, unsigned int size);
void			ft_print_numbers(void);
void			ft_print_reverse_alphabet(void);
void			ft_putchar(char c);
void			ft_putnbr_base(int nbr, char *base);
void			ft_putnbr(int nb);
void			ft_putstr(char *str);
void			ft_putstr_non_printable(char *str);
int				ft_recursive_factorial(int nb);
int				ft_recursive_power(int nb, int power);
void			ft_sort_integer_table(int *tab, int size);
int				ft_sqrt(int nb);
char			*ft_strcapitalize(char *str);
char			*ft_strcat(char *dest, char *src);
int				ft_strcmp(char *s1, char *s2);
char			*ft_strcpy(char *dest, char *src);
int				ft_str_is_alpha(char *str);
int				ft_str_is_lower_case(char *str);
int				ft_str_is_numeric(char *str);
int				ft_str_is_printable(char *str);
int				ft_str_is_upper_case(char *str);
unsigned int	ft_strlcat(char *dest, char *src, unsigned int size);
unsigned int	ft_strlcpy(char *dest, char *src, unsigned int size);
int				ft_strlen(char *str);
char			*ft_strlowcase(char *str);
char			*ft_strncat(char *dest, char *src, int nb);
int				ft_strncmp(char *s1, char *s2, unsigned int n);
char			*ft_strncpy(char *dest, char *src, unsigned int n);
char			*ft_strrev(char *str);
char			*ft_strstr(char *str, char *to_find);
char			*ft_strupcase(char *str);
void			ft_swap(int *a, int *b);
void			ft_ultimate_div_mod(int *a, int *b);
void			ft_ultimate_ft(int *********nbr);
#endif
